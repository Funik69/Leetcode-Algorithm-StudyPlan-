class Solution {
public:
void dfs(int i,int j,int m,int n,vector<vector<int>>& grid,int rotten){
    if(i<0 || j<0 || i==m || j==n || grid[i][j]==0 || grid[i][j]>1 && grid[i][j]<rotten)
    return ;
    grid[i][j]=rotten;
    dfs(i+1,j,m,n,grid,rotten+1);
    dfs(i-1,j,m,n,grid,rotten+1);
    dfs(i,j+1,m,n,grid,rotten+1);
    dfs(i,j-1,m,n,grid,rotten+1);
    
}
    int orangesRotting(vector<vector<int>>& grid) {
        int m=grid.size();
        int rotten=2;
        int n=grid[0].size();
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==2){
                    dfs(i,j,m,n,grid,rotten);
                }
            }
        }
        int evaluate=2;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                 if(grid[i][j] == 1)
                    return -1;
                evaluate = max(evaluate, grid[i][j]);
            }
        }
   return evaluate-2; 
   }
};

